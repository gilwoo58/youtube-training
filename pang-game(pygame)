

# 조작 방법 화살표로 양옆 이동가능
# 스페이스바로 무기발사 가능
# 공에 맞으면 D짐
# 제한시간 지나도 D짐
# 모든 공을 없애면 성공

# 여기서 하면 랙걸림

import pygame # pygame 라이브러리 불러오기
import os

pygame.init() # 초기화 (무조건 해야함)

# 화면 크기 설정
screen_width = 640 # 가로 크기
screen_height = 480 # 세로 크기
screen = pygame.display.set_mode((screen_width, screen_height))

# 화면 타이틀 설정
pygame.display.set_caption("Pang") # 게임 이름

# FPS
clock = pygame.time.Clock()

current_path = os.path.dirname(__file__) # 현재 파일 위치
image_path = os.path.join(current_path, "images")

# 배경
background = pygame.image.load(os.path.join(image_path,"background.jpg"))

# 스테이지
stage = pygame.image.load(os.path.join(image_path,"stage_real.PNG"))
stage_size = stage.get_rect().size
stage_height = stage_size[1]

# 스테이지2
stage2 = pygame.image.load(os.path.join(image_path,"stage2.PNG"))
stage2_size = stage2.get_rect().size
stage2_height = stage2_size[1]
stage2_weight = stage2_size[0]
stage2_x_pos = screen_width - stage2_height*14
stage2_y_pos = screen_height - stage2_height*11

# 스테이지3
stage3 = pygame.image.load(os.path.join(image_path,"stage2.PNG"))
stage3_size = stage3.get_rect().size
stage3_height = stage3_size[1]
stage3_weight = stage3_size[0]
stage3_x_pos = screen_width - stage3_height*28
stage3_y_pos = screen_height - stage3_height*11

# 캐릭터
character = pygame.image.load(os.path.join(image_path,"character_real.png"))
character_size = character.get_rect().size
character_width = character_size[0]
character_height = character_size[1]
character_x_pos = (screen_width / 2) - (character_width/2)
character_y_pos = screen_height - character_height - stage_height

# 캐릭터 이동 방향
character_to_x = 0

# 캐릭터 이동 속도
character_speed = 5

# 무기
weapon = pygame.image.load(os.path.join(image_path,"weaponup.PNG"))
weapon_size = weapon.get_rect().size
weapon_width = weapon_size[0]

weapons = []

# 무기 이동 속도
weapon_speed = 12

# 공 만들기 
ball_images = [
    pygame.image.load(os.path.join(image_path,"balloon1.png")),
    pygame.image.load(os.path.join(image_path,"balloon2.png")),
    pygame.image.load(os.path.join(image_path,"balloon3.png")),
    pygame.image.load(os.path.join(image_path,"balloon4.png"))
]

# 공 크기에 따른 스피드
ball_speed_y = [-18, -15, -12 , -10]

# 공들
balls = []

balls.append({
    "pos_x" : 50, # 공의 x좌표
    "pos_y" : 50, # 공의 y좌표
    "img_idx" : 0, # 공의 이미지
    "to_x" : 3, # x축 이동방향
    "to_y" : -6, # y축 이동방향
    "init_spe_y" : ball_speed_y[0] # y 최초 속도 
})

# 사라질 무기, 공 정보 저장 변수
weapon_to_remove = -1
ball_to_remove = -1

# 폰트 정의
game_win = 0
game_font = pygame.font.Font(None, 40)
total_time = 25 # 시간  
start_ticks = pygame.time.get_ticks()

game_result = "Game Over"

running = True

while running:
    dt = clock.tick(30)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                character_to_x -= character_speed
            elif event.key == pygame.K_RIGHT:
                character_to_x += character_speed
            elif event.key == pygame.K_SPACE:
                weapon_x_pos = character_x_pos + (character_width / 2) - (weapon_width / 2)
                weapon_y_pos = character_y_pos
                weapons.append([weapon_x_pos, weapon_y_pos])

        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
                character_to_x = 0
    
    character_x_pos += character_to_x

    if character_x_pos < 0:
        character_x_pos = 0
    elif character_x_pos > screen_width - character_width:
        character_x_pos = screen_width - character_width
    
    # 무기 위치 조정
    weapons = [[w[0],w[1] - weapon_speed]for w in weapons]

    # 무기 없애기
    weapons = [[w[0], w[1]] for w in weapons if w[1] > 0]

    stage2_rect = stage2.get_rect()
    stage2_rect.left = stage2_x_pos
    stage2_rect.top = stage2_y_pos

    stage3_rect = stage3.get_rect()
    stage3_rect.left = stage3_x_pos
    stage3_rect.top = stage3_y_pos

    # 공 위치 정의
    for ball_idx, ball_val in enumerate(balls):
        ball_pos_x = ball_val["pos_x"]
        ball_pos_y = ball_val["pos_y"]
        ball_img_idx = ball_val["img_idx"]

        ball_size = ball_images[ball_img_idx].get_rect().size
        ball_width = ball_size[0]
        ball_height = ball_size[1]

        # 가로벽에 닿았을 때 공 이동 위치 변경
        if ball_pos_x < 0 or ball_pos_x > screen_width - ball_width:
            ball_val["to_x"] = ball_val["to_x"] * -1

        # 세로벽에 닿았을 때 공 이동 위치 변경
        if ball_pos_y >= screen_height - stage_height - ball_height:
            ball_val["to_y"] = ball_val["init_spe_y"]

        if ball_pos_y >= screen_height:
            ball_val["to_y"] = ball_val["init_spe_y"]
        else: # 그 외의 모든 경우에는 속도를 증가
            ball_val["to_y"] += 0.5
        
        ball_val["pos_x"] += ball_val["to_x"]
        ball_val["pos_y"] += ball_val["to_y"]

    # 충돌 처리
    character_rect = character.get_rect()
    character_rect.left = character_x_pos
    character_rect.top = character_y_pos

    if len(balls) ==0:
        game_result = "Mission Complete"
        game_win = 1
        running = False

    screen.blit(background,(0,0))
    screen.blit(stage2,(stage2_x_pos, stage2_y_pos))
    screen.blit(stage3,(stage3_x_pos, stage3_y_pos))

    for weapon_x_pos, weapon_y_pos in weapons:
        screen.blit(weapon, (weapon_x_pos, weapon_y_pos))

    for ball_idx, ball_val in enumerate(balls):
        ball_pos_x = ball_val["pos_x"]
        ball_pos_y = ball_val["pos_y"]
        ball_img_idx = ball_val["img_idx"]
        screen.blit(ball_images[ball_img_idx], (ball_pos_x, ball_pos_y))

        # 공 위치 업데이트
        ball_rect = ball_images[ball_img_idx].get_rect()
        ball_rect.left = ball_pos_x
        ball_rect.top = ball_pos_y

        if character_rect.colliderect(ball_rect):
            running = False
            break

        if stage2_rect.colliderect(ball_rect):
            ball_val["to_y"] = -12
        
        if stage3_rect.colliderect(ball_rect):
            ball_val["to_y"] = -12

        # 공과 무기들 충동 처리
        for weapon_idx, weapon_val in enumerate(weapons):
            weapon_pos_x = weapon_val[0]
            weapon_pos_y = weapon_val[1]

            # 무기 위치 업데이트
            weapon_rect = weapon.get_rect()
            weapon_rect.left = weapon_pos_x
            weapon_rect.top = weapon_pos_y

            # 충돌 체크
            if weapon_rect.colliderect(ball_rect):
                weapon_to_remove = weapon_idx
                ball_to_remove = ball_idx
                
                if ball_img_idx < 3:
                    
                    # 현재 공 크기 정보
                    ball_width = ball_rect.size[0]
                    ball_height = ball_rect.size[1]

                    # 나눠진 공 정보
                    small_ball_rect = ball_images[ball_img_idx + 1].get_rect()
                    small_ball_width = small_ball_rect.size[0]
                    small_ball_height = small_ball_rect.size[1]    

                    balls.append({
                        "pos_x" : ball_pos_x + (ball_width / 2) - (small_ball_width / 2), # 공의 x좌표
                        "pos_y" : ball_pos_y + (ball_height / 2) - (small_ball_height / 2), # 공의 y좌표
                        "img_idx" : ball_img_idx + 1, # 공의 이미지
                        "to_x" : -3, # x축 이동방향
                        "to_y" : -6, # y축 이동방향
                        "init_spe_y" : ball_speed_y[ball_img_idx + 1] # y 최초 속도 
                    })

                    balls.append({
                        "pos_x" : ball_pos_x + (ball_width / 2) - (small_ball_width / 2), # 공의 x좌표
                        "pos_y" : ball_pos_y + (ball_height / 2) - (small_ball_height / 2), # 공의 y좌표
                        "img_idx" : ball_img_idx + 1, # 공의 이미지
                        "to_x" : 3, # x축 이동방향
                        "to_y" : -6, # y축 이동방향
                        "init_spe_y" : ball_speed_y[ball_img_idx + 1]}) # y 최초 속도
               
                break
        else:
            continue
        break             

    if ball_to_remove > -1:
        del balls[ball_to_remove]
        ball_to_remove = -1

    if weapon_to_remove > -1:
        del weapons[weapon_to_remove]
        weapon_to_remove = -1
    screen.blit(stage,(0, screen_height - stage_height))
    screen.blit(character,(character_x_pos,character_y_pos))

    # 경과 시간 계산
    elapsed_time = (pygame.time.get_ticks() - start_ticks) / 1000
    timer = game_font.render("Time : {}".format(int(total_time - elapsed_time)),True,(255,255,255))
    screen.blit(timer, (10,10))

    # 시간 초과
    if total_time - elapsed_time <= 0:
        game_result = "Time Over"
        running = False

    pygame.display.update()

# 게임 메시지
msg = game_font.render(game_result, True, (255,255, 0))
msg_rect = msg.get_rect(center=(int(screen_width / 2), int(screen_height / 2)))
screen.blit(msg,msg_rect)
pygame.display.update()

bonus_time = "Bonus stage"

bonus = game_font.render(bonus_time, True, (255,255,0))
bonus_rect = bonus.get_rect(center=(int(screen_width / 2), int(screen_height / 2)))

pygame.time.delay(1000)

# 공사중
# 심형섭 건들지 말 것

# if game_win == 1:
#     screen.blit(bonus, msg_rect)
#     pygame.time.delay(1000)
#     pygame.display.update()
#     pygame.time.delay(1000)
#     running = True
#     while running:

# else:
#     pygame.time.delay(1000)
#     pygame.quit()

pygame.time.delay(1000)

pygame.quit()
